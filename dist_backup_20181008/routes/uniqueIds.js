'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _config = require('../config/config.json');

var _config2 = _interopRequireDefault(_config);

var _logger = require('../libs/logger');

var _logger2 = _interopRequireDefault(_logger);

var _async = require('async');

var _async2 = _interopRequireDefault(_async);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var router = _express2.default.Router();

var CODES_CHUNK = 100;
var MAX_CODES = 500;
var createRandom = function createRandom(l) {
  var string = '';
  var letters = 'abcdefghilmnopqrstuvzxwykjABCDEFGHILMNOPQRSTUVZXWYKJ1234567890';
  for (var i = 0; i < l; i += 1) {
    var pos = Math.floor(Math.random() * (letters.length - 0) + 0);
    string += letters[pos];
  }
  return string;
};
var getCodes = function getCodes(howMany, CODE_LEN) {
  var generated = {};
  while (howMany > 0) {
    var candidate = createRandom(CODE_LEN);
    if (!generated[candidate]) {
      generated[candidate] = 1;
      if (howMany % 100000 === 0) {
        // console.log('To Generate (2)', howMany);
      }
      howMany += -1;
    } else {
      // console.log('Collision...');
    }
  }
  var myGenerated = [];
  for (var k in generated) {
    myGenerated.push(k);
  }
  return myGenerated;
};

router.post('/getCodes', function (req, res, next) {
  var dbConnection = req.dbConnection,
      ip = req.ip;
  // console.log('req.body');

  var toGenerate = parseInt(req.body.toGenerate, 10);
  var bookingName = req.body.bookingName;
  if (toGenerate < 1 || !bookingName || bookingName.length < 1) {
    next('Wrong parameters!');
    return;
  }
  new Promise(function (resolve, reject) {
    dbConnection.query('SELECT count(*) as total FROM codiciUnivociVIVR WHERE bookingName = ' + dbConnection.escape(bookingName)).then( // Preliminary checks
    function (result) {
      // console.log('Query', `SELECT count(*) as total FROM codiciUnivociVIVR WHERE bookingName = ${dbConnection.escape(bookingName)}`);
      if (result && result[0].total > 0) {
        return Promise.reject('bookingName ' + bookingName + ' is not unique');
      }
      return Promise.resolve();
    }, function (e) {
      return Promise.reject(e);
    }).then(function () {
      var sql = 'SELECT len FROM codiciUnivociVIVRReport WHERE threshold - count > ' + dbConnection.escape(toGenerate) + ' ORDER BY len ASC LIMIT 1';
      return dbConnection.query(sql).then(function (results) {
        if (results && results[0].len > 0) {
          return Promise.resolve(results[0].len);
        }
        return Promise.reject();
      }, function (e) {
        // console.log('Ex', e);
        return Promise.reject(e);
      });
    }, function (e) {
      return Promise.reject(e);
    }).then( // Generate SQL INSERT
    function (CODE_LEN) {
      var created = 0;
      var loop = 0;
      var nowDate = (0, _moment2.default)().format('YYYY-MM-DD HH:mm:ss');
      return new Promise(function (inRes, inRej) {
        _async2.default.whilst(function () {
          loop += 1;
          return created < Math.min(toGenerate, MAX_CODES);
        }, function (cb) {
          var toCreate = getCodes(Math.min(Math.min(toGenerate, MAX_CODES) - created, CODES_CHUNK), CODE_LEN);
          var valueString = toCreate.map(function (v) {
            return '(' + dbConnection.escape(v) + ',' + dbConnection.escape(bookingName) + ',' + dbConnection.escape(ip) + ',' + dbConnection.escape(nowDate) + ')';
          });
          var sql = 'INSERT IGNORE into codiciUnivociVIVR (code, bookingName, bookingAddress, bookingDate) VALUES ' + valueString;
          dbConnection.query(sql).then(function (result) {
            created += result.affectedRows;
            cb(null);
          }, function (e) {
            cb(e);
          });
        }, function (e) {
          if (e) {
            inRej(e);
          } else {
            inRes(CODE_LEN);
          }
        });
      });
    }, function (e) {
      return Promise.reject(e);
    }).then(function (CODE_LEN) {
      var sql = 'SELECT code FROM codiciUnivociVIVR WHERE bookingName = ' + dbConnection.escape(bookingName);
      // console.log('SELECT SQL', sql);
      return dbConnection.query(sql).then(function (results) {
        // console.log('results', results);
        return Promise.resolve([results.map(function (c) {
          return c.code.toString();
        }), CODE_LEN]);
      }, function (e) {
        return Promise.reject(e);
      });
    }, function (e) {
      return Promise.reject(e);
    }).then(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          validCodes = _ref2[0],
          CODE_LEN = _ref2[1];

      if (validCodes.length > 0) {
        var sql = 'UPDATE codiciUnivociVIVRReport SET count = count + ' + validCodes.length + ' WHERE len = ' + CODE_LEN;
        return dbConnection.query(sql).then(function () {
          return Promise.resolve(validCodes);
        }, function (e) {
          return Promise.reject(e);
        });
      }
      return Promise.resolve(validCodes);
    }, function (e) {
      return Promise.reject(e);
    }).then(function (validCodes) {
      console.info('[uniqueIds] Requested: ' + toGenerate + ', generated ' + validCodes.length);
      res.json(validCodes);
    }, function (e) {
      console.log('E', e);
      next(e);
    });
  });
});

exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,