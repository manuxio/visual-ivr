'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _config = require('../config/config.json');

var _config2 = _interopRequireDefault(_config);

var _logger = require('../libs/logger');

var _logger2 = _interopRequireDefault(_logger);

var _async = require('async');

var _async2 = _interopRequireDefault(_async);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var router = _express2.default.Router();


var rightPadTo = function rightPadTo(s, len) {
  var rS = s.toString();
  var curLen = rS.length;
  var diff = len - curLen;
  if (diff < 1) {
    return s;
  }
  for (var i = 0; i < diff; i += 1) {
    rS += ' ';
  }
  return rS;
};

var makeConcatString = function makeConcatString(s, len) {
  var rS = s.toString();
  var curLen = rS.length;
  var diff = len - curLen;
  return 'RPAD(\'' + rS + '\', ' + len + ', 0x00)';
  rS = 'CONCAT(\'' + rS + '\'';
  if (diff < 1) {
    return rS + ')';
  }
  for (var i = 0; i < diff; i += 1) {
    rS += ', CHAR(X\'00\')';
  }
  return rS + ')';
  // CONCAT('VO2JE',CHAR(X'00'),CHAR(X'00'),CHAR(X'00'),CHAR(X'00'),CHAR(X'00'))
};

var cleanString = function cleanString(s) {
  var finalString = '';
  for (var i = 0; i < s.length; i += 1) {
    var ascii = s.charCodeAt(i);
    if (ascii > 47 && ascii < 91) {
      finalString += s[i];
    }
    if (ascii > 96 && ascii < 123) {
      finalString += s[i];
    }
  }
  return finalString;
};

router.get('/', function (req, res, next) {
  var dbConnection = req.dbConnection,
      ip = req.ip;
  // console.log('req.body');

  res.render('_stats/index', {
    title: 'Accesso statistiche',
    viewEngines: req.viewEngines,
    viewRoots: req.viewRoots
  });
});

router.post('/', function (req, res, next) {
  var body = req.body;

  if (body.mandato) {
    req.session.stats = {
      cliente: body.cliente,
      mandato: body.mandato,
      dati: {}
    };
    res.redirect('/SerfinStats/overview');
  } else {
    res.redirect('/SerfinStats/');
  }
});

router.get('/overview', function (req, res, next) {
  var dbConnection = req.dbConnection,
      session = req.session;

  dbConnection.query('SELECT count(DISTINCT idcontratto) as totaleContratti, count(DISTINCT codice_da_url) as totaleCodiciDaUrl FROM pagamento_online_idcontratto_cf WHERE mandato = ' + dbConnection.escape(session.stats.mandato) + ' AND idcliente = ' + dbConnection.escape(session.stats.cliente)).then(function (results) {
    // console.log('Results', results);
    if (results && results[0] && results[0].totaleContratti > 0) {
      return Promise.resolve({
        totaleContratti: results[0].totaleContratti,
        totaleCodiciDaUrl: results[0].totaleCodiciDaUrl
      });
    } else {
      return Promise.reject();
    }
  }, function (e) {
    return Promise.reject(e);
  }).then(function (data) {
    // console.log(`SELECT DISTINCT codice_da_url as codice FROM pagamento_online_idcontratto_cf WHERE mandato = ${dbConnection.escape(session.stats.mandato)}  AND idcliente = ${dbConnection.escape(session.stats.cliente)}`);
    return dbConnection.query('SELECT DISTINCT codice_da_url as codice FROM pagamento_online_idcontratto_cf WHERE mandato = ' + dbConnection.escape(session.stats.mandato) + '  AND idcliente = ' + dbConnection.escape(session.stats.cliente)).then(function (results) {
      var uniqueCodes = results.map(function (r) {
        return r.codice;
      });
      return Promise.resolve(_extends({
        uniqueCodes: uniqueCodes
      }, data));
    }, function (e) {
      return Promise.reject(e);
    });
  }, function (e) {
    return Promise.reject(e);
  }).then(function (data) {
    var sql = 'SELECT DISTINCT tracking as tracking FROM online_payment_logs WHERE tracking IN (' + data.uniqueCodes.map(function (el) {
      return makeConcatString(el, 10);
    }).join(',') + ')';
    // console.log('Sql', sql);
    return dbConnection.query(sql).then(function (results) {
      var totalConsumedCodes = results.length;
      return Promise.resolve(_extends({
        totalConsumedCodes: totalConsumedCodes,
        consumedCodes: results.map(function (r) {
          if (!r.tracking) {
            console.error('R TRACKING IS NULL');
            console.log(r);
          }
          return cleanString(r.tracking.toString());
        })
      }, data));
    }, function (e) {
      return Promise.reject(e);
    });
  }, function (e) {
    return Promise.reject(e);
  }).then(function (data) {
    if (data.consumedCodes.length === 0) {
      return Promise.resolve(_extends({
        totalConsumedContratti: 0,
        consumedContratti: []
      }, data));
    }
    var sql = 'SELECT count(DISTINCT idcontratto) as totalConsumedContratti, idcontratto FROM pagamento_online_idcontratto_cf WHERE codice_da_url IN (' + data.consumedCodes.map(function (el) {
      return dbConnection.escape(el);
    }).join(',') + ')';
    return dbConnection.query(sql).then(function (results) {
      var totalConsumedContratti = 0;
      if (results && results[0]) {
        totalConsumedContratti = results[0].totalConsumedContratti;
      }
      return Promise.resolve(_extends({
        totalConsumedContratti: totalConsumedContratti,
        consumedContratti: totalConsumedContratti > 0 ? results.map(function (r) {
          if (!r.idcontratto) {
            console.error('NO R IDCONTRATTO');
            console.log(r);
          }
          return r.idcontratto.toString();
        }) : []
      }, data));
    }, function (e) {
      return Promise.reject(e);
    });
  }, function (e) {
    return Promise.reject(e);
  }).then(function (data) {
    if (data.consumedCodes.length === 0) {
      return Promise.resolve(_extends({
        addresses: []
      }, data));
    }
    var sql = 'SELECT email_debitore FROM pagamento_online_idcontratto_cf WHERE codice_da_url IN (' + data.consumedCodes.map(function (el) {
      return dbConnection.escape(el);
    }).join(',') + ')';
    return dbConnection.query(sql).then(function (results) {
      return Promise.resolve(_extends({
        addresses: results.map(function (r) {
          return r.email_debitore;
        })
      }, data));
    }, function (e) {
      return Promise.reject(e);
    });
  }, function (e) {
    return Promise.reject(e);
  }).then(function (data) {
    if (data.consumedContratti.length === 0) {
      return Promise.resolve(_extends({
        totaleContrattiPagati: 0
      }, data));
    }
    var sql = 'SELECT count(DISTINCT idContratto) as totaleContrattiPagati, idcontratto FROM onlinePaymentTransactions WHERE\n          status = \'APPROVED\'\n          AND\n          completed = 1\n          AND\n          idContratto IN (' + data.consumedContratti.map(function (el) {
      return dbConnection.escape(el);
    }).join(',') + ')';
    return dbConnection.query(sql).then(function (results) {
      var totaleContrattiPagati = 0;
      if (results && results[0]) {
        totaleContrattiPagati = results[0].totaleContrattiPagati;
      }
      return Promise.resolve(_extends({
        totaleContrattiPagati: totaleContrattiPagati
      }, data));
    }, function (e) {
      return Promise.reject(e);
    });
  }, function (e) {
    return Promise.reject(e);
  }).then(function (data) {
    if (data.consumedContratti.length === 0) {
      return Promise.resolve(_extends({
        totaleContrattiNonPagati: 0
      }, data));
    }
    var sql = 'SELECT count(DISTINCT idContratto) as totaleContrattiNonPagati, idcontratto FROM onlinePaymentTransactions WHERE\n          status != \'APPROVED\'\n          AND\n          idContratto IN (' + data.consumedContratti.map(function (el) {
      return dbConnection.escape(el);
    }).join(',') + ')';
    return dbConnection.query(sql).then(function (results) {
      var totaleContrattiNonPagati = 0;
      if (results && results[0]) {
        totaleContrattiNonPagati = results[0].totaleContrattiNonPagati;
      }
      return Promise.resolve(_extends({
        totaleContrattiNonPagati: totaleContrattiNonPagati
      }, data));
    }, function (e) {
      return Promise.reject(e);
    });
  }, function (e) {
    return Promise.reject(e);
  }).then(function (data) {
    // console.log('addresses', data.addresses);
    var emails = data.addresses.filter(function (add) {
      return add.indexOf('@') > -1;
    });
    var cellphones = data.addresses.filter(function (add) {
      return add.indexOf('@') < 0;
    });
    var totalEmails = emails.length;
    var totalCellphones = cellphones.length;

    return Promise.resolve(_extends({
      emails: emails,
      cellphones: cellphones,
      totalEmails: totalEmails,
      totalCellphones: totalCellphones
    }, data));
  }, function (e) {
    return Promise.reject(e);
  }).then(function (data) {
    // console.log('Data', data);
    req.session.stats.dati[req.session.stats.mandato] = data;
    res.render('_stats/overview', _extends({
      title: 'Sommario'
    }, data, {
      viewEngines: req.viewEngines,
      viewRoots: req.viewRoots
    }));
  }, function (e) {
    console.log('Error', e);
    res.redirect('/SerfinStats/');
  });
});

exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,